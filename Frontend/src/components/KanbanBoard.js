import { kanbanService } from '../services/kanban-service.js';
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫—ç—à –¥–æ—Å–æ–∫ –∏–∑ DashboardSidebar
import { getBoardsCache, updateBoardsCache } from './DashboardSidebar.js';

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
let saveTimer = null;
// –í—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º (15 —Å–µ–∫—É–Ω–¥)
const SAVE_DELAY = 15000;
// –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å–∫–∏
let currentBoardData = null;
// –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –±—ã–ª–∏ –ª–∏ –≤–Ω–µ—Å–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è
let boardChanged = false;

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∏
export async function renderKanbanBoard(boardId, preloadedBoardData = null) {
  let board = preloadedBoardData; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
  
  console.log('–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∏ —Å ID:', boardId);
  if (preloadedBoardData) {
    console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å–∫–∏:', preloadedBoardData.id);
  }
  
  // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å–∫–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∫—ç—à–µ
  if (!board) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å–∫–∏ –≤ –∫—ç—à–µ –ø–∞–º—è—Ç–∏
    const boardsMemoryCache = getBoardsCache();
    if (boardsMemoryCache) {
      const cachedBoard = boardsMemoryCache.find(b => b.id == boardId);
      if (cachedBoard) {
        console.log(`–ù–∞–π–¥–µ–Ω–∞ –¥–æ—Å–∫–∞ —Å ID ${boardId} –≤ –∫—ç—à–µ –ø–∞–º—è—Ç–∏`);
        board = cachedBoard;
      }
    }
    
    // –ï—Å–ª–∏ –¥–æ—Å–∫–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ –ø–∞–º—è—Ç–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage
    if (!board) {
      const localStorageCache = JSON.parse(localStorage.getItem('kanban_boards_cache') || '[]');
      const cachedBoard = localStorageCache.find(b => b.id == boardId);
      if (cachedBoard) {
        console.log(`–ù–∞–π–¥–µ–Ω–∞ –¥–æ—Å–∫–∞ —Å ID ${boardId} –≤ localStorage`);
        board = cachedBoard;
      }
    }
    
    // –ï—Å–ª–∏ –¥–æ—Å–∫–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ –∏–ª–∏ –Ω–µ—Ç –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
    if (!board || !board._hasUnsavedChanges) {
      try {
        console.log(`–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å–∫–∏ —Å ID ${boardId} —Å —Å–µ—Ä–≤–µ—Ä–∞...`);
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Å–∫–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
        const serverBoard = await kanbanService.getBoard(boardId);
        
        // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–æ—Å–∫–∞ —Å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏, 
        // –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–µ, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å–∫—É —Å —Å–µ—Ä–≤–µ—Ä–∞
        if (board && board._hasUnsavedChanges) {
          console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é');
        } else {
          board = serverBoard;
          console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞');
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
          const boardsCache = getBoardsCache();
          if (boardsCache) {
            const boardIndex = boardsCache.findIndex(b => b.id == boardId);
            if (boardIndex !== -1) {
              boardsCache[boardIndex] = { ...board };
            } else {
              boardsCache.push({ ...board });
            }
            updateBoardsCache(boardsCache);
            console.log('–û–±–Ω–æ–≤–ª–µ–Ω –∫—ç—à –≤ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞');
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤ localStorage
          const localStorageCache = JSON.parse(localStorage.getItem('kanban_boards_cache') || '[]');
          const boardIndex = localStorageCache.findIndex(b => b.id == boardId);
          if (boardIndex !== -1) {
            localStorageCache[boardIndex] = { ...board };
          } else {
            localStorageCache.push({ ...board });
          }
          localStorage.setItem('kanban_boards_cache', JSON.stringify(localStorageCache));
          console.log('–û–±–Ω–æ–≤–ª–µ–Ω –∫—ç—à –≤ localStorage –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞');
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å–∫–∏ —Å ID ${boardId}:`, error);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç —Ñ–ª–∞–≥–∞ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if (board) {
          console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞');
        } else {
          return `
            <div class="board-container">
              <div class="board-header">
                <h1 class="board-title">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h1>
              </div>
              <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Å–∫—É: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}</p>
            </div>
          `;
        }
      }
    } else {
      console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å–∫–∏ —Å ID ${boardId} —Å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏`);
    }
  } else {
    console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å–∫–∏ —Å ID ${boardId}`);
  }
  
  // –ï—Å–ª–∏ –¥–æ—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
  if (!board) {
    return `
      <div class="board-container">
        <div class="board-header">
          <h1 class="board-title">–î–æ—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h1>
        </div>
        <p>–î–æ—Å–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞</p>
      </div>
    `;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –¥–æ—Å–∫–µ
  if (board._hasUnsavedChanges) {
    boardChanged = true;
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –¥–æ—Å–∫–∏
    setTimeout(() => {
      const saveStatus = document.getElementById('saveStatus');
      if (saveStatus) {
        saveStatus.textContent = '–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã...';
        saveStatus.classList.add('unsaved');
      }
    }, 0);
  } else {
    boardChanged = false;
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å–∫–∏
  currentBoardData = board;
  
  // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –¥–æ—Å–∫–∏ –∏–∑ JSON
  let boardColumnsData = [];
  try {
    const parsedData = JSON.parse(board.boardData);
    boardColumnsData = parsedData.columns || [];
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å–∫–∏:', error);
    boardColumnsData = [];
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫
  const columnsHtml = boardColumnsData.map((column, index) => {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –∫–æ–ª–æ–Ω–∫–µ
    const cardsHtml = column.tasks.map(task => `
      <div class="kanban-card" draggable="true" data-task-id="${task.id}">
        <div class="card-content">
          <div class="card-title">${task.title}</div>
          ${task.description ? `<div class="card-description">${task.description}</div>` : ''}
        </div>
        <div class="card-actions">
          <button class="card-edit-btn" data-task-id="${task.id}">‚úèÔ∏è</button>
          <button class="card-delete-btn" data-task-id="${task.id}">üóëÔ∏è</button>
        </div>
      </div>
    `).join('');
    
    return `
      <div class="kanban-column" data-column-id="${column.id}">
        <div class="column-header">
          <div class="column-title-container">
            <h3 class="column-title" data-column-id="${column.id}">${column.name}</h3>
          </div>
          <div class="column-actions">
            <button class="column-delete-btn" data-column-id="${column.id}">üóëÔ∏è</button>
          </div>
        </div>
        <div class="column-cards" data-column-id="${column.id}">
          ${cardsHtml}
        </div>
        <div class="column-footer">
          <button class="add-card-btn" data-column-id="${column.id}">+ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É</button>
        </div>
      </div>
    `;
  }).join('');
  
  // –†–µ–Ω–¥–µ—Ä–∏–º –¥–æ—Å–∫—É
  return `
    <div class="board-container">
      <div class="board-header">
        <h1 class="board-title">${board.name}</h1>
        <div class="board-actions">
          <div id="saveStatus" class="save-status">–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã</div>
          <button class="btn-secondary" id="editBoardButton">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
          <button class="btn-danger" id="deleteBoardButton">–£–¥–∞–ª–∏—Ç—å</button>
        </div>
      </div>
      
      <div class="kanban-board" id="kanbanBoard" data-board-id="${boardId}">
        ${columnsHtml}
        <div class="add-column-container">
          <button class="add-column-btn" id="addColumnBtn">+ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É</button>
        </div>
      </div>
    </div>
  `;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∏
export function setupBoardEventListeners(boardId, onBoardDeleted) {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å–∫–∏
  const editBoardButton = document.getElementById('editBoardButton');
  if (editBoardButton) {
    editBoardButton.addEventListener('click', () => {
      editBoard(boardId);
    });
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Å–∫–∏
  const deleteBoardButton = document.getElementById('deleteBoardButton');
  if (deleteBoardButton) {
    deleteBoardButton.addEventListener('click', () => {
      deleteBoard(boardId, onBoardDeleted);
    });
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏
  const addColumnBtn = document.getElementById('addColumnBtn');
  if (addColumnBtn) {
    addColumnBtn.addEventListener('click', () => {
      addNewColumn();
    });
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
  const addCardBtns = document.querySelectorAll('.add-card-btn');
  addCardBtns.forEach(btn => {
    btn.addEventListener('click', (e) => {
      const columnId = e.target.getAttribute('data-column-id');
      addNewCard(columnId);
    });
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∫–æ–ª–æ–Ω–æ–∫ (–∏–Ω–ª–∞–π–Ω-—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
  const columnTitles = document.querySelectorAll('.column-title-container');
  columnTitles.forEach(titleContainer => {
    titleContainer.addEventListener('click', (e) => {
      // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
      const titleElement = titleContainer.querySelector('.column-title');
      if (titleElement) {
        const columnId = titleElement.getAttribute('data-column-id');
        startEditColumnTitle(titleElement, columnId);
      }
    });
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
  const columnDeleteBtns = document.querySelectorAll('.column-delete-btn');
  columnDeleteBtns.forEach(btn => {
    btn.addEventListener('click', (e) => {
      const columnId = e.target.getAttribute('data-column-id');
      deleteColumn(columnId);
    });
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
  const cardEditBtns = document.querySelectorAll('.card-edit-btn');
  cardEditBtns.forEach(btn => {
    btn.addEventListener('click', (e) => {
      e.stopPropagation(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
      const taskId = e.target.getAttribute('data-task-id');
      editCard(taskId);
    });
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
  const cardDeleteBtns = document.querySelectorAll('.card-delete-btn');
  cardDeleteBtns.forEach(btn => {
    btn.addEventListener('click', (e) => {
      e.stopPropagation(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
      const taskId = e.target.getAttribute('data-task-id');
      deleteCard(taskId);
    });
  });
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ drag and drop –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
  setupDragAndDrop();
  
  // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª—É—à–∞—Ç–µ–ª—å beforeunload, –µ—Å–ª–∏ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
  window.removeEventListener('beforeunload', handleBeforeUnload);
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–∏ —É—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  window.addEventListener('beforeunload', handleBeforeUnload);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è beforeunload
function handleBeforeUnload(e) {
  if (boardChanged) {
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const message = '–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É?';
    e.returnValue = message;
    forceSaveBoardData();
    return message;
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
function setupDragAndDrop() {
  const cards = document.querySelectorAll('.kanban-card');
  const dropZones = document.querySelectorAll('.column-cards');
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
  cards.forEach(card => {
    card.addEventListener('dragstart', handleDragStart);
    card.addEventListener('dragend', handleDragEnd);
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
    card.addEventListener('dragover', handleDragOver);
    card.addEventListener('dragleave', handleDragLeave);
  });
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–æ–Ω—ã –¥–ª—è –±—Ä–æ—Å–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
  dropZones.forEach(zone => {
    zone.addEventListener('dragover', handleDragOver);
    zone.addEventListener('dragenter', handleDragEnter);
    zone.addEventListener('dragleave', handleDragLeave);
    zone.addEventListener('drop', handleDrop);
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è drag and drop
function handleDragStart(e) {
  e.dataTransfer.setData('text/plain', e.target.getAttribute('data-task-id'));
  e.target.classList.add('dragging');
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∫–æ–ª–æ–Ω–∫—É
  const sourceColumnId = e.target.closest('.column-cards').getAttribute('data-column-id');
  e.dataTransfer.setData('source-column', sourceColumnId);
}

function handleDragEnd(e) {
  e.target.classList.remove('dragging');
  
  // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  document.querySelectorAll('.card-drop-indicator').forEach(el => el.remove());
  document.querySelectorAll('.drag-over').forEach(el => el.classList.remove('drag-over'));
}

function handleDragOver(e) {
  e.preventDefault(); // –†–∞–∑—Ä–µ—à–∞–µ–º drop
  
  // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∏ –∫–æ–ª–æ–Ω–∫—É
  const cardElement = e.target.closest('.kanban-card');
  const columnElement = e.target.closest('.column-cards');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–µ–ª–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
  const isDropIndicator = e.target.classList.contains('card-drop-indicator');
  if (isDropIndicator) {
    // –ï—Å–ª–∏ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞–¥ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    return;
  }
  
  // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
  const existingIndicator = columnElement.querySelector('.card-drop-indicator');
  
  // –ï—Å–ª–∏ –º—ã –Ω–µ –Ω–∞–¥ –∫–∞—Ä—Ç–æ—á–∫–æ–π –∏ –Ω–µ –≤ –ø—É—Å—Ç–æ–π –∫–æ–ª–æ–Ω–∫–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
  if (!cardElement && existingIndicator) {
    return;
  }
  
  // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
  document.querySelectorAll('.card-drop-indicator').forEach(el => el.remove());
  document.querySelectorAll('.drag-over-top, .drag-over-bottom').forEach(el => {
    el.classList.remove('drag-over-top', 'drag-over-bottom');
  });
  
  // –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å drag-over –∫ –∫–æ–ª–æ–Ω–∫–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏ –Ω–∞–¥ –ª—é–±—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –≤ –∫–æ–ª–æ–Ω–∫–µ
  if (columnElement) {
    columnElement.classList.add('drag-over');
  }
  
  if (!cardElement) {
    // –ï—Å–ª–∏ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞–¥ –ø—É—Å—Ç–æ–π –æ–±–ª–∞—Å—Ç—å—é –∫–æ–ª–æ–Ω–∫–∏, —Ç–æ–ª—å–∫–æ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫—É
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–π
  if (cardElement.classList.contains('dragging')) {
    return;
  }
  
  // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–∞—Ä—Ç–æ—á–∫–∏
  const rect = cardElement.getBoundingClientRect();
  const y = e.clientY - rect.top;
  const isBottomHalf = y > rect.height / 2;
  
  // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–º–µ—Å—Ç–æ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –≥—Ä–∞–Ω–∏—Ü
  const indicator = document.createElement('div');
  indicator.className = 'card-drop-indicator';
  
  if (isBottomHalf) {
    // –†–∞–∑–º–µ—â–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–Ω–∏–∑—É –∫–∞—Ä—Ç–æ—á–∫–∏
    cardElement.after(indicator);
  } else {
    // –†–∞–∑–º–µ—â–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–≤–µ—Ä—Ö—É –∫–∞—Ä—Ç–æ—á–∫–∏
    cardElement.before(indicator);
  }
}

function handleDragEnter(e) {
  e.preventDefault();
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –Ω–∞–¥ —á–µ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫—É—Ä—Å–æ—Ä
  const columnElement = e.target.closest('.column-cards');
  if (columnElement) {
    columnElement.classList.add('drag-over');
  }
}

function handleDragLeave(e) {
  // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å —É –∫–æ–ª–æ–Ω–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–∫–∏–¥–∞–µ–º —Å–∞–º—É –∫–æ–ª–æ–Ω–∫—É, –∞ –Ω–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–Ω—É—Ç—Ä–∏ –Ω–µ—ë
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ relatedTarget (—ç–ª–µ–º–µ–Ω—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ—Ö–æ–¥–∏–º) –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –∫–æ–ª–æ–Ω–∫–µ
  const columnElement = e.currentTarget;
  const relatedTarget = e.relatedTarget;
  
  if (!columnElement.contains(relatedTarget)) {
    columnElement.classList.remove('drag-over');
  }
  
  // –ü—Ä–∏ —É—Ö–æ–¥–µ —Å –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä - —ç—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º dragover
}

function handleDrop(e) {
  e.preventDefault();
  
  // –û—á–∏—â–∞–µ–º –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  document.querySelectorAll('.drag-over').forEach(el => el.classList.remove('drag-over'));
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  const taskId = e.dataTransfer.getData('text/plain');
  const sourceColumnId = e.dataTransfer.getData('source-column');
  const targetColumnId = e.currentTarget.getAttribute('data-column-id');
  
  // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫—É, –∫–æ—Ç–æ—Ä—É—é –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º
  const draggedCard = document.querySelector(`.kanban-card[data-task-id="${taskId}"]`);
  if (!draggedCard) return;
  
  // –ù–∞–π–¥–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—Å—Ç–∞–≤–∫–∏
  const dropIndicator = document.querySelector('.card-drop-indicator');
  
  // –ù–∞—Ö–æ–¥–∏–º —Ü–µ–ª–µ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É (–µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å)
  const cardElement = e.target.closest('.kanban-card');
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º–µ–∂–¥—É –∫–æ–ª–æ–Ω–∫–∞–º–∏ –∏–ª–∏ –≤–Ω—É—Ç—Ä–∏ –∫–æ–ª–æ–Ω–∫–∏
  if (sourceColumnId !== targetColumnId) {
    if (dropIndicator) {
      // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∞ –º–µ—Å—Ç–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
      dropIndicator.parentNode.insertBefore(draggedCard, dropIndicator);
    } else if (cardElement && cardElement !== draggedCard) {
      // –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞, –Ω–æ –µ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
      const rect = cardElement.getBoundingClientRect();
      const y = e.clientY - rect.top;
      const isBottomHalf = y > rect.height / 2;
      
      if (isBottomHalf) {
        cardElement.after(draggedCard);
      } else {
        cardElement.before(draggedCard);
      }
    } else {
      // –ï—Å–ª–∏ –Ω–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞, –Ω–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü –∫–æ–ª–æ–Ω–∫–∏
      e.currentTarget.appendChild(draggedCard);
    }
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ—Å–∫–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –º–µ–∂–¥—É –∫–æ–ª–æ–Ω–∫–∞–º–∏
    moveCardBetweenColumns(taskId, sourceColumnId, targetColumnId);
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ —Ü–µ–ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
    updateCardOrderInColumn(targetColumnId);
  } else {
    // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ –∫–æ–ª–æ–Ω–∫–∏
    if (dropIndicator) {
      // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∞ –º–µ—Å—Ç–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
      dropIndicator.parentNode.insertBefore(draggedCard, dropIndicator);
    } else if (cardElement && cardElement !== draggedCard) {
      // –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞, –Ω–æ –µ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
      const rect = cardElement.getBoundingClientRect();
      const y = e.clientY - rect.top;
      const isBottomHalf = y > rect.height / 2;
      
      if (isBottomHalf) {
        cardElement.after(draggedCard);
      } else {
        cardElement.before(draggedCard);
      }
    } else if (!cardElement || e.currentTarget.children.length === 0) {
      // –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –∫—É—Ä—Å–æ—Ä –Ω–µ –Ω–∞–¥ –∫–∞—Ä—Ç–æ—á–∫–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü –∫–æ–ª–æ–Ω–∫–∏
      e.currentTarget.appendChild(draggedCard);
    }
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –¥–∞–Ω–Ω—ã—Ö
    updateCardOrderInColumn(sourceColumnId);
  }
  
  // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏
  document.querySelectorAll('.card-drop-indicator').forEach(el => el.remove());
  
  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
  draggedCard.classList.remove('dragging');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –º–µ–∂–¥—É –∫–æ–ª–æ–Ω–∫–∞–º–∏
function moveCardBetweenColumns(taskId, sourceColumnId, targetColumnId) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å–∫–∏
    const boardData = JSON.parse(currentBoardData.boardData);
    
    // –ù–∞—Ö–æ–¥–∏–º –∏—Å—Ö–æ–¥–Ω—É—é –∏ —Ü–µ–ª–µ–≤—É—é –∫–æ–ª–æ–Ω–∫–∏
    const sourceColumnIndex = boardData.columns.findIndex(col => col.id === sourceColumnId);
    const targetColumnIndex = boardData.columns.findIndex(col => col.id === targetColumnId);
    
    if (sourceColumnIndex === -1 || targetColumnIndex === -1) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏—Å—Ö–æ–¥–Ω—É—é –∏–ª–∏ —Ü–µ–ª–µ–≤—É—é –∫–æ–ª–æ–Ω–∫—É');
      return;
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ
    const taskIndex = boardData.columns[sourceColumnIndex].tasks.findIndex(task => task.id === taskId);
    if (taskIndex === -1) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–¥–∞—á—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ');
      return;
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏
    const task = boardData.columns[sourceColumnIndex].tasks.splice(taskIndex, 1)[0];
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ DOM –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
    const targetColumnCards = document.querySelector(`.column-cards[data-column-id="${targetColumnId}"]`);
    const cardElements = targetColumnCards.querySelectorAll('.kanban-card');
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –∑–∞–¥–∞—á –≤ —Ü–µ–ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    const newTasks = [];
    let taskAdded = false;
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º DOM –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    cardElements.forEach(card => {
      const cardId = card.getAttribute('data-task-id');
      
      if (cardId === taskId) {
        // –≠—Ç–æ –Ω–∞—à–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞, –µ—ë —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ –≤ DOM,
        // –Ω–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—ë –¥–∞–Ω–Ω—ã–µ –≤ –º–∞—Å—Å–∏–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        taskAdded = true;
        newTasks.push(task);
      } else {
        // –≠—Ç–æ –¥—Ä—É–≥–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞, –Ω–∞—Ö–æ–¥–∏–º –µ—ë –¥–∞–Ω–Ω—ã–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤
        const existingTask = boardData.columns[targetColumnIndex].tasks.find(t => t.id === cardId);
        if (existingTask) {
          newTasks.push(existingTask);
        }
      }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ –∑–∞–¥–∞—á —Ü–µ–ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
    boardData.columns[targetColumnIndex].tasks = newTasks;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ—Å–∫–∏
    updateBoardData(boardData);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –∫–æ–ª–æ–Ω–∫–µ
function updateCardOrderInColumn(columnId) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å–∫–∏
    const boardData = JSON.parse(currentBoardData.boardData);
    
    // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏
    const columnIndex = boardData.columns.findIndex(col => col.id === columnId);
    if (columnIndex === -1) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–ª–æ–Ω–∫—É');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—è–¥–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ DOM
    const columnCards = document.querySelector(`.column-cards[data-column-id="${columnId}"]`);
    const cardElements = columnCards.querySelectorAll('.kanban-card');
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –∑–∞–¥–∞—á –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    const newTasks = [];
    cardElements.forEach(card => {
      const taskId = card.getAttribute('data-task-id');
      const task = boardData.columns[columnIndex].tasks.find(t => t.id === taskId);
      if (task) {
        newTasks.push(task);
      }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∑–∞–¥–∞—á –≤ –¥–∞–Ω–Ω—ã—Ö
    boardData.columns[columnIndex].tasks = newTasks;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ—Å–∫–∏
    updateBoardData(boardData);
    
    console.log('–ü–æ—Ä—è–¥–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –∫–æ–ª–æ–Ω–∫–µ:', columnId);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å–∫–∏
async function editBoard(boardId) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å–∫–∏
    const board = await kanbanService.getBoard(boardId);
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å–∫–∏
    const newName = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å–∫–∏:', board.name);
    
    if (newName === null) return; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª
    if (newName.trim() === '') {
      alert('–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateData = {
      name: newName,
      boardData: board.boardData
    };
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å–∫—É
    await kanbanService.updateBoard(boardId, updateData);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    window.location.reload();
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–æ—Å–∫–∏ —Å ID ${boardId}:`, error);
    alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–æ—Å–∫—É: ' + (error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Å–∫–∏
async function deleteBoard(boardId, onBoardDeleted) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  if (boardChanged) {
    const saveFirst = window.confirm('–î–æ—Å–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º?');
    if (saveFirst) {
      await saveBoardData();
    }
  }
  
  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
  const confirmed = window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –¥–æ—Å–∫—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.');
  
  if (!confirmed) return;
  
  try {
    console.log('–£–¥–∞–ª–µ–Ω–∏–µ –¥–æ—Å–∫–∏ —Å ID:', boardId);
    // –£–¥–∞–ª—è–µ–º –¥–æ—Å–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    await kanbanService.deleteBoard(boardId);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –¥–æ—Å–æ–∫ –≤ localStorage
    const cachedBoards = JSON.parse(localStorage.getItem('kanban_boards_cache') || '[]');
    const updatedCache = cachedBoards.filter(board => board.id != boardId);
    localStorage.setItem('kanban_boards_cache', JSON.stringify(updatedCache));
    console.log('–ö—ç—à –¥–æ—Å–æ–∫ –≤ localStorage –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è, –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ—Å–æ–∫:', updatedCache.length);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
    const currentCache = getBoardsCache();
    if (currentCache) {
      const updatedMemoryCache = currentCache.filter(board => board.id != boardId);
      updateBoardsCache(updatedMemoryCache);
      console.log('–ö—ç—à –¥–æ—Å–æ–∫ –≤ –ø–∞–º—è—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è');
    }
    
    // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–ª–±—ç–∫, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
    if (typeof onBoardDeleted === 'function') {
      console.log('–í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–ª–±—ç–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Å–∫–∏');
      onBoardDeleted();
    } else {
      console.log('–ö–æ–ª–ª–±—ç–∫ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –¥–∞—à–±–æ—Ä–¥ –≤—Ä—É—á–Ω—É—é');
      // –ï—Å–ª–∏ –∫–æ–ª–ª–±—ç–∫ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é
      window.location.hash = '/dashboard';
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ—Å–∫–∏ —Å ID ${boardId}:`, error);
    alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–æ—Å–∫—É: ' + (error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
function addNewColumn() {
  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
  const columnName = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏:');
  if (!columnName || columnName.trim() === '') return;
  
  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏
    const columnId = 'column_' + Date.now();
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å–∫–∏
    const boardData = JSON.parse(currentBoardData.boardData);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É
    boardData.columns.push({
      id: columnId,
      name: columnName,
      tasks: []
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ—Å–∫–∏
    updateBoardData(boardData);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –≤ DOM –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const kanbanBoard = document.getElementById('kanbanBoard');
    const addColumnContainer = document.querySelector('.add-column-container');
    
    const newColumnHtml = `
      <div class="kanban-column" data-column-id="${columnId}">
        <div class="column-header">
          <div class="column-title-container">
            <h3 class="column-title" data-column-id="${columnId}">${columnName}</h3>
          </div>
          <div class="column-actions">
            <button class="column-delete-btn" data-column-id="${columnId}">üóëÔ∏è</button>
          </div>
        </div>
        <div class="column-cards" data-column-id="${columnId}">
          <!-- –ö–∞—Ä—Ç–æ—á–∫–∏ –±—É–¥—É—Ç –∑–¥–µ—Å—å -->
        </div>
        <div class="column-footer">
          <button class="add-card-btn" data-column-id="${columnId}">+ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É</button>
        </div>
      </div>
    `;
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    const newColumn = document.createElement('div');
    newColumn.innerHTML = newColumnHtml;
    kanbanBoard.insertBefore(newColumn.firstElementChild, addColumnContainer);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    const newColumnElement = kanbanBoard.querySelector(`.kanban-column[data-column-id="${columnId}"]`);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
    const addCardBtn = newColumnElement.querySelector('.add-card-btn');
    addCardBtn.addEventListener('click', () => {
      addNewCard(columnId);
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ (–∏–Ω–ª–∞–π–Ω-—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
    const columnTitleContainer = newColumnElement.querySelector('.column-title-container');
    columnTitleContainer.addEventListener('click', (e) => {
      const titleElement = columnTitleContainer.querySelector('.column-title');
      if (titleElement) {
        startEditColumnTitle(titleElement, columnId);
      }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏
    const deleteColumnBtn = newColumnElement.querySelector('.column-delete-btn');
    deleteColumnBtn.addEventListener('click', () => {
      deleteColumn(columnId);
    });
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º drag and drop –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
    const dropZone = newColumnElement.querySelector('.column-cards');
    dropZone.addEventListener('dragover', handleDragOver);
    dropZone.addEventListener('dragenter', handleDragEnter);
    dropZone.addEventListener('dragleave', handleDragLeave);
    dropZone.addEventListener('drop', handleDrop);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏:', error);
    alert('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É: ' + error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏
function startEditColumnTitle(titleElement, columnId) {
  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞
  const titleContainer = titleElement.closest('.column-title-container');
  if (!titleContainer) return;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
  const currentName = titleElement.textContent;
  
  // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
  const inputElement = document.createElement('input');
  inputElement.type = 'text';
  inputElement.value = currentName;
  inputElement.className = 'column-title-edit';
  inputElement.setAttribute('data-column-id', columnId);
  
  // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
  titleContainer.innerHTML = '';
  titleContainer.appendChild(inputElement);
  
  // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏ –≤—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç
  inputElement.focus();
  inputElement.select();
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–∫–∞ –≤–Ω–µ –ø–æ–ª—è –≤–≤–æ–¥–∞
  const handleClickOutside = (e) => {
    if (e.target !== inputElement) {
      finishEditColumnTitle(inputElement, titleContainer, columnId);
      document.removeEventListener('click', handleClickOutside);
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è Enter
  const handleEnterKey = (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      finishEditColumnTitle(inputElement, titleContainer, columnId);
      inputElement.removeEventListener('keydown', handleEnterKey);
    }
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape —Å –æ—Ç–º–µ–Ω–æ–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (e.key === 'Escape') {
      e.preventDefault();
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
      restoreColumnTitle(titleContainer, columnId, currentName);
      inputElement.removeEventListener('keydown', handleEnterKey);
      setTimeout(() => {
        document.removeEventListener('click', handleClickOutside);
      }, 10);
    }
  };
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  setTimeout(() => {
    document.addEventListener('click', handleClickOutside);
  }, 10); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ
  
  inputElement.addEventListener('keydown', handleEnterKey);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–æ–ª–æ–Ω–∫–∏
function restoreColumnTitle(titleContainer, columnId, title) {
  const h3 = document.createElement('h3');
  h3.className = 'column-title';
  h3.setAttribute('data-column-id', columnId);
  h3.textContent = title;
  
  titleContainer.innerHTML = '';
  titleContainer.appendChild(h3);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏
function finishEditColumnTitle(inputElement, titleContainer, columnId) {
  const newName = inputElement.value.trim();
  
  // –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
  if (newName !== '') {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å–∫–∏
    try {
      const boardData = JSON.parse(currentBoardData.boardData);
      
      // –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const columnIndex = boardData.columns.findIndex(column => column.id === columnId);
      if (columnIndex === -1) {
        console.error('–ö–æ–ª–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        const defaultValue = inputElement.defaultValue || '–ö–æ–ª–æ–Ω–∫–∞';
        restoreColumnTitle(titleContainer, columnId, defaultValue);
        return;
      }
      
      const currentName = boardData.columns[columnIndex].name;
      
      // –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ–Ω—è–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∞ —Ç–µ–∫—Å—Ç
      if (newName === currentName) {
        restoreColumnTitle(titleContainer, columnId, currentName);
        return;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
      boardData.columns[columnIndex].name = newName;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ—Å–∫–∏
      updateBoardData(boardData);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ DOM
      restoreColumnTitle(titleContainer, columnId, newName);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É: ' + error.message);
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      const boardData = JSON.parse(currentBoardData.boardData);
      const columnIndex = boardData.columns.findIndex(column => column.id === columnId);
      if (columnIndex !== -1) {
        restoreColumnTitle(titleContainer, columnId, boardData.columns[columnIndex].name);
      } else {
        const defaultValue = inputElement.defaultValue || '–ö–æ–ª–æ–Ω–∫–∞';
        restoreColumnTitle(titleContainer, columnId, defaultValue);
      }
    }
  } else {
    // –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    const boardData = JSON.parse(currentBoardData.boardData);
    const columnIndex = boardData.columns.findIndex(column => column.id === columnId);
    if (columnIndex !== -1) {
      restoreColumnTitle(titleContainer, columnId, boardData.columns[columnIndex].name);
    } else {
      const defaultValue = inputElement.defaultValue || '–ö–æ–ª–æ–Ω–∫–∞';
      restoreColumnTitle(titleContainer, columnId, defaultValue);
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏
function deleteColumn(columnId) {
  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
  const confirmed = window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–æ–ª–æ–Ω–∫—É? –í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –∫–æ–ª–æ–Ω–∫–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.');
  if (!confirmed) return;
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å–∫–∏
    const boardData = JSON.parse(currentBoardData.boardData);
    
    // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    const columnIndex = boardData.columns.findIndex(column => column.id === columnId);
    if (columnIndex === -1) {
      console.error('–ö–æ–ª–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    
    // –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É
    boardData.columns.splice(columnIndex, 1);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ—Å–∫–∏
    updateBoardData(boardData);
    
    // –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –∏–∑ DOM –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const columnElement = document.querySelector(`.kanban-column[data-column-id="${columnId}"]`);
    if (columnElement) {
      columnElement.remove();
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏:', error);
    alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É: ' + error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
function addNewCard(columnId) {
  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
  const cardTitle = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏:');
  if (!cardTitle || cardTitle.trim() === '') return;
  
  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  const cardDescription = prompt('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ (–ø–æ –∂–µ–ª–∞–Ω–∏—é):');
  
  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
    const taskId = 'task_' + Date.now();
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    const newTask = {
      id: taskId,
      title: cardTitle,
      description: cardDescription || '',
      createdAt: new Date().toISOString()
    };
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å–∫–∏
    const boardData = JSON.parse(currentBoardData.boardData);
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
    const columnIndex = boardData.columns.findIndex(column => column.id === columnId);
    if (columnIndex === -1) {
      console.error('–ö–æ–ª–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –∫–æ–ª–æ–Ω–∫—É
    boardData.columns[columnIndex].tasks.push(newTask);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ—Å–∫–∏
    updateBoardData(boardData);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ DOM –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const columnCards = document.querySelector(`.column-cards[data-column-id="${columnId}"]`);
    if (columnCards) {
      const cardHtml = `
        <div class="kanban-card" draggable="true" data-task-id="${taskId}">
          <div class="card-content">
            <div class="card-title">${cardTitle}</div>
            ${cardDescription ? `<div class="card-description">${cardDescription}</div>` : ''}
          </div>
          <div class="card-actions">
            <button class="card-edit-btn" data-task-id="${taskId}">‚úèÔ∏è</button>
            <button class="card-delete-btn" data-task-id="${taskId}">üóëÔ∏è</button>
          </div>
        </div>
      `;
      
      const tempDiv = document.createElement('div');
      tempDiv.innerHTML = cardHtml;
      const cardElement = tempDiv.firstElementChild;
      columnCards.appendChild(cardElement);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
      cardElement.addEventListener('dragstart', handleDragStart);
      cardElement.addEventListener('dragend', handleDragEnd);
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
      cardElement.addEventListener('dragover', handleDragOver);
      cardElement.addEventListener('dragleave', handleDragLeave);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
      const editBtn = cardElement.querySelector('.card-edit-btn');
      editBtn.addEventListener('click', (e) => {
        e.stopPropagation();
        editCard(taskId);
      });
      
      const deleteBtn = cardElement.querySelector('.card-delete-btn');
      deleteBtn.addEventListener('click', (e) => {
        e.stopPropagation();
        deleteCard(taskId);
      });
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:', error);
    alert('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É: ' + error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
function editCard(taskId) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å–∫–∏
    const boardData = JSON.parse(currentBoardData.boardData);
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–æ–Ω–∫—É –∏ –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    let foundTask = null;
    let columnIndex = -1;
    let taskIndex = -1;
    
    for (let i = 0; i < boardData.columns.length; i++) {
      const column = boardData.columns[i];
      const tIndex = column.tasks.findIndex(task => task.id === taskId);
      
      if (tIndex !== -1) {
        columnIndex = i;
        taskIndex = tIndex;
        foundTask = column.tasks[tIndex];
        break;
      }
    }
    
    if (!foundTask) {
      console.error('–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    const newTitle = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏:', foundTask.title);
    if (!newTitle || newTitle.trim() === '') return;
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    const newDescription = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏:', foundTask.description || '');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –≤–Ω–µ—Å–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if (newTitle === foundTask.title && newDescription === foundTask.description) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    boardData.columns[columnIndex].tasks[taskIndex].title = newTitle;
    boardData.columns[columnIndex].tasks[taskIndex].description = newDescription;
    boardData.columns[columnIndex].tasks[taskIndex].updatedAt = new Date().toISOString();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ—Å–∫–∏
    updateBoardData(boardData);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ DOM –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const cardElement = document.querySelector(`.kanban-card[data-task-id="${taskId}"]`);
    if (cardElement) {
      const titleElement = cardElement.querySelector('.card-title');
      if (titleElement) {
        titleElement.textContent = newTitle;
      }
      
      let descriptionElement = cardElement.querySelector('.card-description');
      if (newDescription) {
        if (descriptionElement) {
          descriptionElement.textContent = newDescription;
        } else {
          // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –æ–ø–∏—Å–∞–Ω–∏—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
          descriptionElement = document.createElement('div');
          descriptionElement.className = 'card-description';
          descriptionElement.textContent = newDescription;
          cardElement.querySelector('.card-content').appendChild(descriptionElement);
        }
      } else if (descriptionElement) {
        // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –æ–ø–∏—Å–∞–Ω–∏—è, –µ—Å–ª–∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ
        descriptionElement.remove();
      }
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:', error);
    alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É: ' + error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
function deleteCard(taskId) {
  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
  const confirmed = window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ä—Ç–æ—á–∫—É?');
  if (!confirmed) return;
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å–∫–∏
    const boardData = JSON.parse(currentBoardData.boardData);
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–æ–Ω–∫—É –∏ –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    let columnIndex = -1;
    let taskIndex = -1;
    
    for (let i = 0; i < boardData.columns.length; i++) {
      const column = boardData.columns[i];
      const tIndex = column.tasks.findIndex(task => task.id === taskId);
      
      if (tIndex !== -1) {
        columnIndex = i;
        taskIndex = tIndex;
        break;
      }
    }
    
    if (columnIndex === -1 || taskIndex === -1) {
      console.error('–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    
    // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    boardData.columns[columnIndex].tasks.splice(taskIndex, 1);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ—Å–∫–∏
    updateBoardData(boardData);
    
    // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ DOM –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const cardElement = document.querySelector(`.kanban-card[data-task-id="${taskId}"]`);
    if (cardElement) {
      cardElement.remove();
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:', error);
    alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É: ' + error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å–∫–∏
function updateBoardData(boardData) {
  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ—Å–∫–∏
    const stringifiedData = JSON.stringify(boardData);
    currentBoardData.boardData = stringifiedData;
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const saveStatus = document.getElementById('saveStatus');
    if (saveStatus) {
      saveStatus.textContent = '–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã...';
      saveStatus.classList.add('unsaved');
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    boardChanged = true;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    currentBoardData._hasUnsavedChanges = true;
    
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å–∫–∏:', currentBoardData.id);
    
    // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –¥–æ—Å–æ–∫ –≤ –ø–∞–º—è—Ç–∏
    const boardsCache = getBoardsCache();
    if (boardsCache) {
      const boardIndex = boardsCache.findIndex(board => board.id == currentBoardData.id);
      if (boardIndex !== -1) {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –æ–±—ä–µ–∫—Ç–∞ –¥–æ—Å–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å —Å—Å—ã–ª–∫–∞–º–∏
        const updatedBoard = JSON.parse(JSON.stringify(currentBoardData));
        updatedBoard._hasUnsavedChanges = true; // –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
        
        boardsCache[boardIndex] = updatedBoard;
        updateBoardsCache(boardsCache);
        console.log('–ö—ç—à –≤ –ø–∞–º—è—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω, –∏–Ω–¥–µ–∫—Å –¥–æ—Å–∫–∏:', boardIndex);
      } else {
        console.warn('–î–æ—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫—ç—à–µ –ø–∞–º—è—Ç–∏:', currentBoardData.id);
      }
    } else {
      console.warn('–ö—ç—à –≤ –ø–∞–º—è—Ç–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤ localStorage
    const localStorageCache = JSON.parse(localStorage.getItem('kanban_boards_cache') || '[]');
    const boardIndex = localStorageCache.findIndex(board => board.id == currentBoardData.id);
    
    if (boardIndex !== -1) {
      // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –æ–±—ä–µ–∫—Ç–∞ –¥–æ—Å–∫–∏ —á–µ—Ä–µ–∑ —Å—Ç—Ä–æ–∫–æ–≤—É—é —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é
      const updatedBoard = JSON.parse(JSON.stringify(currentBoardData));
      updatedBoard._hasUnsavedChanges = true; // –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
      
      localStorageCache[boardIndex] = updatedBoard;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫—ç—à –≤ localStorage
      localStorage.setItem('kanban_boards_cache', JSON.stringify(localStorageCache));
      console.log('–ö—ç—à –≤ localStorage –æ–±–Ω–æ–≤–ª–µ–Ω, –∏–Ω–¥–µ–∫—Å –¥–æ—Å–∫–∏:', boardIndex);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –¥–∞–Ω–Ω—ã–µ
      const afterUpdateCache = JSON.parse(localStorage.getItem('kanban_boards_cache') || '[]');
      const afterUpdateBoard = afterUpdateCache.find(b => b.id == currentBoardData.id);
      if (afterUpdateBoard && afterUpdateBoard._hasUnsavedChanges) {
        console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞: —Ñ–ª–∞–≥ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∫—ç—à–µ localStorage');
      } else {
        console.error('–û—à–∏–±–∫–∞: —Ñ–ª–∞–≥ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∫—ç—à–µ localStorage –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        console.log('–î–∞–Ω–Ω—ã–µ –≤ –∫—ç—à–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', afterUpdateBoard);
      }
    } else {
      console.warn('–î–æ—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫—ç—à–µ localStorage:', currentBoardData.id);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å–∫—É –≤ –∫—ç—à, –µ—Å–ª–∏ –µ—ë —Ç–∞–º –Ω–µ—Ç
      const updatedBoard = JSON.parse(JSON.stringify(currentBoardData));
      updatedBoard._hasUnsavedChanges = true;
      
      localStorageCache.push(updatedBoard);
      localStorage.setItem('kanban_boards_cache', JSON.stringify(localStorageCache));
      console.log('–î–æ—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫—ç—à localStorage');
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    if (saveTimer) {
      clearTimeout(saveTimer);
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (15 —Å–µ–∫—É–Ω–¥)
    saveTimer = setTimeout(() => {
      saveBoardData();
    }, SAVE_DELAY);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å–∫–∏:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
async function saveBoardData() {
  if (!boardChanged) return;
  
  try {
    const saveStatus = document.getElementById('saveStatus');
    if (saveStatus) {
      saveStatus.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
      saveStatus.classList.remove('unsaved');
      saveStatus.classList.add('saving');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!currentBoardData || !currentBoardData.id) {
      throw new Error('–î–∞–Ω–Ω—ã–µ –¥–æ—Å–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
    }
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateData = {
      name: currentBoardData.name,
      boardData: currentBoardData.boardData
    };
    
    console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', currentBoardData.id);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    await kanbanService.updateBoard(currentBoardData.id, updateData);
    
    // –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    delete currentBoardData._hasUnsavedChanges;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    boardChanged = false;
    
    console.log('–î–æ—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à–∏');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –¥–æ—Å–æ–∫ –≤ –ø–∞–º—è—Ç–∏
    const boardsCache = getBoardsCache();
    if (boardsCache) {
      const boardIndex = boardsCache.findIndex(board => board.id == currentBoardData.id);
      if (boardIndex !== -1) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ø–∏—é –æ–±—ä–µ–∫—Ç–∞ –±–µ–∑ —Å–≤–æ–π—Å—Ç–≤–∞ _hasUnsavedChanges
        const updatedBoard = JSON.parse(JSON.stringify(currentBoardData));
        boardsCache[boardIndex] = updatedBoard;
        updateBoardsCache(boardsCache);
        console.log('–ö—ç—à –≤ –ø–∞–º—è—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤ localStorage
    const localStorageCache = JSON.parse(localStorage.getItem('kanban_boards_cache') || '[]');
    const boardIndex = localStorageCache.findIndex(board => board.id == currentBoardData.id);
    if (boardIndex !== -1) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ø–∏—é –æ–±—ä–µ–∫—Ç–∞ –±–µ–∑ —Å–≤–æ–π—Å—Ç–≤–∞ _hasUnsavedChanges
      const updatedBoard = JSON.parse(JSON.stringify(currentBoardData));
      localStorageCache[boardIndex] = updatedBoard;
      localStorage.setItem('kanban_boards_cache', JSON.stringify(localStorageCache));
      console.log('–ö—ç—à –≤ localStorage –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
      const checkCache = JSON.parse(localStorage.getItem('kanban_boards_cache') || '[]');
      const checkBoard = checkCache.find(b => b.id == currentBoardData.id);
      if (checkBoard && !checkBoard._hasUnsavedChanges) {
        console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞: —Ñ–ª–∞–≥ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π —É–¥–∞–ª–µ–Ω –∏–∑ –∫—ç—à–∞ localStorage');
      } else if (checkBoard && checkBoard._hasUnsavedChanges) {
        console.error('–û—à–∏–±–∫–∞: —Ñ–ª–∞–≥ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ—Å—Ç–∞–ª—Å—è –≤ –∫—ç—à–µ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      }
    } else {
      console.warn('–î–æ—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫—ç—à–µ localStorage:', currentBoardData.id);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å–∫—É –≤ –∫—ç—à, –µ—Å–ª–∏ –µ—ë —Ç–∞–º –Ω–µ—Ç
      const updatedBoard = JSON.parse(JSON.stringify(currentBoardData));
      localStorageCache.push(updatedBoard);
      localStorage.setItem('kanban_boards_cache', JSON.stringify(localStorageCache));
      console.log('–î–æ—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫—ç—à localStorage');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    if (saveStatus) {
      saveStatus.textContent = '–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã';
      saveStatus.classList.remove('saving');
      saveStatus.classList.remove('unsaved');
    }
    
    console.log('–î–æ—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ—Å–∫–∏:', error);
    
    const saveStatus = document.getElementById('saveStatus');
    if (saveStatus) {
      saveStatus.textContent = '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
      saveStatus.classList.remove('saving');
      saveStatus.classList.add('error');
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ—Å–∫–∏ –ø—Ä–∏ —É—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function forceSaveBoardData() {
  if (boardChanged && currentBoardData) {
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateData = {
      name: currentBoardData.name,
      boardData: currentBoardData.boardData
    };
    
    console.log('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ—Å–∫–∏:', currentBoardData.id);
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —É—Ö–æ–¥–æ–º —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const xhr = new XMLHttpRequest();
      xhr.open('PUT', `/api/boards/${currentBoardData.id}`, false); // false = —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
      xhr.setRequestHeader('Content-Type', 'application/json');
      xhr.send(JSON.stringify(updateData));
      
      if (xhr.status >= 200 && xhr.status < 300) {
        // –£—Å–ø–µ—à–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        delete currentBoardData._hasUnsavedChanges;
        boardChanged = false;
        
        console.log('–î–æ—Å–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à–∏');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
        const boardsCache = getBoardsCache();
        if (boardsCache) {
          const boardIndex = boardsCache.findIndex(board => board.id == currentBoardData.id);
          if (boardIndex !== -1) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ø–∏—é –æ–±—ä–µ–∫—Ç–∞ –±–µ–∑ —Ñ–ª–∞–≥–∞ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
            const updatedBoard = JSON.parse(JSON.stringify(currentBoardData));
            boardsCache[boardIndex] = updatedBoard;
            updateBoardsCache(boardsCache);
            console.log('–ö—ç—à –≤ –ø–∞–º—è—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
          }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤ localStorage
        const localStorageCache = JSON.parse(localStorage.getItem('kanban_boards_cache') || '[]');
        const boardIndex = localStorageCache.findIndex(board => board.id == currentBoardData.id);
        if (boardIndex !== -1) {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ø–∏—é –æ–±—ä–µ–∫—Ç–∞ –±–µ–∑ —Ñ–ª–∞–≥–∞ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
          const updatedBoard = JSON.parse(JSON.stringify(currentBoardData));
          localStorageCache[boardIndex] = updatedBoard;
          localStorage.setItem('kanban_boards_cache', JSON.stringify(localStorageCache));
          console.log('–ö—ç—à –≤ localStorage –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        }
        
        console.log('–î–æ—Å–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º');
      } else {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ—Å–∫–∏');
      }
    } catch (error) {
      console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ—Å–∫–∏:', error);
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π –¥–æ—Å–∫–∏
export function cleanupBoardEventListeners() {
  // –£–¥–∞–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å beforeunload
  window.removeEventListener('beforeunload', handleBeforeUnload);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
  if (boardChanged && currentBoardData) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–≥–æ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ
    forceSaveBoardData();
  }
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  if (saveTimer) {
    clearTimeout(saveTimer);
    saveTimer = null;
  }
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ—Å–∫–∏
  boardChanged = false;
  currentBoardData = null;
  
  console.log('–û—á–∏—Å—Ç–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π –¥–æ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
} 