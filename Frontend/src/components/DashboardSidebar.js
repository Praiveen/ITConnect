import { kanbanService } from "../services/kanban-service.js";
import { workspaceService } from "../services/workspace-service.js";
import { navigateToChat } from "./WorkspaceManager.js";

let boardsCache = null;
let lastBoardsFetchTime = 0;
const CACHE_TIMEOUT = 60 * 1000;

let workspacesCache = null;
let lastWorkspacesFetchTime = 0;

let expandedWorkspacesCache = null;

let allUserChatsCache = null;
let lastAllUserChatsFetchTime = 0;

export const WORKSPACE_TABS = {
  ALL: "all",
  MY: "my",
  SHARED: "shared",
};

let activeWorkspaceTab = WORKSPACE_TABS.MY;

export function getBoardsCache() {
  return boardsCache;
}

export function updateBoardsCache(newCache) {
  boardsCache = newCache;
  lastBoardsFetchTime = Date.now();
}

export function invalidateWorkspaceChatsCache(workspaceId) {
  console.log(
    `[–°–ê–ô–î–ë–ê–†] invalidateWorkspaceChatsCache –≤—ã–∑–≤–∞–Ω –¥–ª—è –†–ü ${workspaceId}. –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–±—â–∏–π –∫—ç—à —á–∞—Ç–æ–≤.`
  );
  invalidateAllUserChatsCache();
}

export function invalidateAllUserChatsCache() {
  allUserChatsCache = null;
  lastAllUserChatsFetchTime = 0;
  console.log("[–°–ê–ô–î–ë–ê–†] –ö—ç—à –í–°–ï–• —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω.");
}

export async function renderDashboardSidebar(
  activeEntityId = null,
  activeWorkspaceIdFromDashboard = null
) {
  let activeEntityType = null;

  console.log(
    "–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏. –ê–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç (–∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞):",
    activeEntityId,
    "–ê–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ (–∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞):",
    activeWorkspaceIdFromDashboard
  );

  const currentHash = window.location.hash.substring(1);
  const urlParams = new URLSearchParams(
    currentHash.includes("?") ? currentHash.split("?")[1] : ""
  );

  const boardIdFromUrl = urlParams.get("board");
  const chatIdFromUrl = urlParams.get("chat");
  const workspaceIdFromUrl = urlParams.get("workspace");

  if (!activeEntityId) {
    if (boardIdFromUrl) {
      activeEntityId = boardIdFromUrl;
      activeEntityType = "board";
    } else if (chatIdFromUrl) {
      activeEntityId = chatIdFromUrl;
      activeEntityType = "chat";
    }
  } else {
    if (boardIdFromUrl && boardIdFromUrl === activeEntityId)
      activeEntityType = "board";
    else if (chatIdFromUrl && chatIdFromUrl === activeEntityId)
      activeEntityType = "chat";
  }

  const currentActiveWorkspaceId =
    activeWorkspaceIdFromDashboard || workspaceIdFromUrl;

  console.log(
    "–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∞–π–¥–±–∞—Ä–∞: –∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç =",
    activeEntityId,
    "–¢–∏–ø =",
    activeEntityType,
    "–∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ =",
    currentActiveWorkspaceId
  );

  setTimeout(() => {
    stabilizeDOMAfterRender();
  }, 10);

  const savedExpandedWorkspaces = getSavedExpandedWorkspaces();

  let workspaces = [];
  const now = Date.now();
  const useWorkspacesCache =
    workspacesCache && now - lastWorkspacesFetchTime < CACHE_TIMEOUT;

  if (useWorkspacesCache) {
    workspaces = workspacesCache;
  } else {
    try {
      workspaces = await workspaceService.getAllWorkspaces();
      workspacesCache = workspaces;
      lastWorkspacesFetchTime = now;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤:", error);
      workspaces = [];
    }
  }

  let boards = [];
  const useBoardsCache =
    boardsCache && now - lastBoardsFetchTime < CACHE_TIMEOUT;

  if (useBoardsCache) {
    boards = boardsCache;
  } else {
    try {
      boards = await kanbanService.getBoards();
      boardsCache = boards;
      lastBoardsFetchTime = now;
      localStorage.setItem("kanban_boards_cache", JSON.stringify(boards));
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ—Å–æ–∫:", error);
      const localStorageCache = localStorage.getItem("kanban_boards_cache");
      if (localStorageCache) boards = JSON.parse(localStorageCache);
    }
  }

  if (!allUserChatsCache || now - lastAllUserChatsFetchTime > CACHE_TIMEOUT) {
    try {
      console.log("[–°–ê–ô–î–ë–ê–†] –ó–∞–≥—Ä—É–∑–∫–∞ –í–°–ï–• —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");
      allUserChatsCache = await workspaceService.getAllUserChats();
      lastAllUserChatsFetchTime = now;
      console.log(
        `[–°–ê–ô–î–ë–ê–†] –í–°–ï —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã (${
          (allUserChatsCache || []).length
        } —à—Ç).`
      );
    } catch (error) {
      console.error(
        "[–°–ê–ô–î–ë–ê–†] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        error
      );
      allUserChatsCache = allUserChatsCache || [];
    }
  }

  if (
    activeEntityType === "board" &&
    activeEntityId &&
    !boards.some((board) => board.id == activeEntityId)
  ) {
    try {
      const boardData = await kanbanService.getBoard(activeEntityId);
      if (boardData) {
        boards.push(boardData);
        boardsCache = boards;
        localStorage.setItem("kanban_boards_cache", JSON.stringify(boards));
      }
    } catch (error) {
      console.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ç–∏–≤–Ω–æ–π –¥–æ—Å–∫–∏ ${activeEntityId}:`,
        error
      );
    }
  } else if (
    activeEntityType === "chat" &&
    activeEntityId &&
    currentActiveWorkspaceId
  ) {
    const isActiveChatInGlobalCache =
      allUserChatsCache &&
      allUserChatsCache.some(
        (chat) =>
          chat.id == activeEntityId &&
          chat.workspaceId == currentActiveWorkspaceId
      );

    if (!isActiveChatInGlobalCache) {
      console.warn(
        `[–°–ê–ô–î–ë–ê–†] –ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç ${activeEntityId} (–†–ü: ${currentActiveWorkspaceId}) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ allUserChatsCache. –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ.`
      );
      try {
        const chatData = await workspaceService.getChatById(
          currentActiveWorkspaceId,
          activeEntityId
        );
        if (chatData) {
          if (!allUserChatsCache) {
            allUserChatsCache = [];
          }

          if (!allUserChatsCache.some((c) => c.id === chatData.id)) {
            allUserChatsCache.push(chatData);
          }

          console.log(
            `–ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç ${activeEntityId} –∏–∑ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ ${currentActiveWorkspaceId} –∑–∞–≥—Ä—É–∂–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ allUserChatsCache`
          );
        }
      } catch (error) {
        console.error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ ${activeEntityId} –∏–∑ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ ${currentActiveWorkspaceId}:`,
          error
        );
      }
    }
  }

  let activeItemWorkspaceId = null;
  if (activeEntityId) {
    if (activeEntityType === "board") {
      const activeBoardData = boards.find(
        (board) => board.id == activeEntityId
      );
      if (activeBoardData)
        activeItemWorkspaceId = activeBoardData.workspaceId?.toString();
    } else if (activeEntityType === "chat") {
      activeItemWorkspaceId = currentActiveWorkspaceId;
    }

    if (
      activeItemWorkspaceId &&
      !savedExpandedWorkspaces.includes(activeItemWorkspaceId)
    ) {
      savedExpandedWorkspaces.push(activeItemWorkspaceId);

      if (expandedWorkspacesCache) {
        expandedWorkspacesCache = [...savedExpandedWorkspaces];
      } else {
        expandedWorkspacesCache = [...savedExpandedWorkspaces];
      }
      console.log(
        `–ê–∫—Ç–∏–≤–Ω–æ–µ –†–ü ${activeItemWorkspaceId} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ expandedWorkspacesCache –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞.`
      );
    }
  }

  let workspacesHtml = "";
  if (workspaces && workspaces.length > 0) {
    workspacesHtml = await Promise.all(
      workspaces.map(async (workspace) => {
        const workspaceBoards = boards.filter(
          (board) => board.workspaceId == workspace.id
        );

        let workspaceChats = [];
        if (allUserChatsCache) {
          workspaceChats = allUserChatsCache.filter(
            (chat) => chat.workspaceId?.toString() === workspace.id?.toString()
          );
        }

        const isActiveWorkspace =
          workspace.id == currentActiveWorkspaceId ||
          workspace.id == activeItemWorkspaceId;
        const wasPreviouslyExpanded = savedExpandedWorkspaces.includes(
          workspace.id.toString()
        );
        const isExpanded = isActiveWorkspace || wasPreviouslyExpanded;

        const hasBoards = workspaceBoards.length > 0;
        const hasChats = workspaceChats.length > 0;

        const boardsContent = hasBoards
          ? workspaceBoards
              .map(
                (board) => `
          <div class="workspace-board ${
            activeEntityType === "board" && board.id == activeEntityId
              ? "active"
              : ""
          }" 
               data-board-id="${board.id}" 
               data-stable-item="true">
            <span class="workspace-board-icon">üìã</span>
            <span>${board.name}</span>
          </div>
        `
              )
              .join("")
          : "";

        const chatsContent = hasChats
          ? workspaceChats
              .map((chat) => {
                const isChatActive =
                  activeEntityType === "chat" &&
                  chat.id.toString() === activeEntityId &&
                  workspace.id.toString() === currentActiveWorkspaceId;

                if (workspace.id.toString() === currentActiveWorkspaceId) {
                  console.log(
                    `[–°–ê–ô–î–ë–ê–†] –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —á–∞—Ç–∞ –≤ –†–ü ${workspace.id.toString()}: ID=${
                      chat.id
                    }, Name=${chat.name}. –ê–∫—Ç–∏–≤–µ–Ω –ª–∏ —ç—Ç–æ—Ç —á–∞—Ç: ${isChatActive}`
                  );
                }
                return `
          <div class="workspace-chat ${isChatActive ? "active" : ""}"
               data-chat-id="${chat.id}"
               data-workspace-id="${workspace.id}" 
               data-stable-item="true">
            <span class="workspace-chat-icon">üí¨</span>
            <span>${chat.name}</span>
          </div>
        `;
              })
              .join("")
          : "";

        let emptyNotice = "";
        if (!hasBoards && !hasChats) {
          emptyNotice =
            '<div class="workspace-empty-notice">–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø—É—Å—Ç–æ</div>';
        }

        return `
        <div class="workspace-list-item ${isExpanded ? "expanded" : ""} ${
          isActiveWorkspace ? "active" : ""
        }" 
            data-workspace-id="${workspace.id}" 
            data-stable-render="true">
          <div class="workspace-header">
            <div class="workspace-name">
              <span class="workspace-icon">üîπ</span>
              <span>${workspace.name || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"}</span>
            </div>
            <span class="workspace-toggle workspace-toggle-fixed">‚ùØ</span>
          </div>
          
          <div class="workspace-items-container" style="${
            isExpanded ? "display:block; opacity:1; max-height:none;" : ""
          }">
            ${boardsContent}
            ${chatsContent}
            ${emptyNotice}
          </div>
        </div>
      `;
      })
    );
    workspacesHtml = workspacesHtml.join("");
  } else {
    workspacesHtml =
      '<div class="workspaces-empty">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤</div>';
  }

  return `
    <div class="dashboard-sidebar">
      <div class="sidebar-header">
        <div class="sidebar-title">–†–∞–±–æ—á–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞</div>
      </div>
      
      <div class="workspace-tabs-vertical">
        <div class="workspace-tab-item ${
          activeWorkspaceTab === WORKSPACE_TABS.ALL ? "active" : ""
        }" data-tab="${WORKSPACE_TABS.ALL}">
          <span class="workspace-tab-icon">üåê</span>
          <span>–í—Å–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞</span>
        </div>
        <div class="workspace-tab-item ${
          activeWorkspaceTab === WORKSPACE_TABS.MY ? "active" : ""
        }" data-tab="${WORKSPACE_TABS.MY}">
          <span class="workspace-tab-icon">üë§</span>
          <span>–ú–æ–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞</span>
        </div>
        <div class="workspace-tab-item ${
          activeWorkspaceTab === WORKSPACE_TABS.SHARED ? "active" : ""
        }" data-tab="${WORKSPACE_TABS.SHARED}">
          <span class="workspace-tab-icon">üë•</span>
          <span>–°–æ–≤–º–µ—Å—Ç–Ω—ã–µ</span>
        </div>
      </div>
      
      <div class="workspace-divider">
        <span class="workspace-divider-text">–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ</span>
      </div>
      
      <div class="workspaces-list">
        ${workspacesHtml}
      </div>
    </div>
  `;
}

function preserveExpandedWorkspaces() {
  try {
    const expandedWorkspaces = document.querySelectorAll(
      ".workspace-list-item.expanded"
    );

    const expandedIds = Array.from(expandedWorkspaces)
      .map((item) => {
        const id = item.getAttribute("data-workspace-id");
        return id ? id.toString() : null;
      })
      .filter((id) => id);

    expandedWorkspacesCache = expandedIds;

    localStorage.setItem("expanded_workspaces", JSON.stringify(expandedIds));
    console.log("–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ä–∞—Å–∫—Ä—ã—Ç—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:", expandedIds);
  } catch (error) {
    console.error(
      "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å–∫—Ä—ã—Ç—ã—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤:",
      error
    );
  }
}

function getSavedExpandedWorkspaces() {
  if (expandedWorkspacesCache) {
    console.log(
      "–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à —Ä–∞—Å–∫—Ä—ã—Ç—ã—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤:",
      expandedWorkspacesCache
    );
    return expandedWorkspacesCache;
  }

  try {
    const savedJson = localStorage.getItem("expanded_workspaces");
    if (savedJson) {
      const parsed = JSON.parse(savedJson);

      if (Array.isArray(parsed)) {
        expandedWorkspacesCache = parsed.map((id) => id.toString());
        return expandedWorkspacesCache;
      } else {
        console.error(
          "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å–∫—Ä—ã—Ç—ã—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞—Ö –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º",
          parsed
        );

        localStorage.removeItem("expanded_workspaces");
      }
    }
  } catch (error) {
    console.error(
      "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å–∫—Ä—ã—Ç—ã—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞—Ö:",
      error
    );

    localStorage.removeItem("expanded_workspaces");
  }
  expandedWorkspacesCache = [];
  return expandedWorkspacesCache;
}

export function setupSidebarEventListeners(
  onBoardSelect,
  onWorkspaceTabClick,
  onWorkspaceSelect,
  onChatSelect
) {
  try {
    setTimeout(() => {
      const expandedItems = document.querySelectorAll(
        ".workspace-list-item.expanded"
      );

      expandedItems.forEach((item) => {
        item.setAttribute("data-stable-render", "true");

        const toggleIcon = item.querySelector(".workspace-toggle");
        if (toggleIcon) {
          toggleIcon.textContent = "‚ùØ";

          toggleIcon.classList.add("workspace-toggle-fixed");
        }

        const itemsContainer = item.querySelector(".workspace-items-container");
        if (itemsContainer) {
          itemsContainer.style.display = "block";
          itemsContainer.style.maxHeight = "none";
          itemsContainer.style.opacity = "1";

          const childItems = itemsContainer.querySelectorAll(
            ".workspace-board, .workspace-chat"
          );
          childItems.forEach((child) => {
            child.setAttribute("data-stable-item", "true");
          });
        }
      });

      console.log("–°—Ç–∏–ª–∏ —Ä–∞—Å–∫—Ä—ã—Ç—ã—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, DOM —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    }, 0);

    const boardItems = document.querySelectorAll(".workspace-board");
    boardItems.forEach((item) => {
      item.addEventListener("click", (e) => {
        e.stopPropagation();
        const boardId = item.getAttribute("data-board-id");

        const workspaceItem = item.closest(".workspace-list-item");
        const workspaceId = workspaceItem?.getAttribute("data-workspace-id");

        try {
          if (
            workspaceId &&
            expandedWorkspacesCache &&
            !expandedWorkspacesCache.includes(workspaceId)
          ) {
            expandedWorkspacesCache.push(workspaceId);
            localStorage.setItem(
              "expanded_workspaces",
              JSON.stringify(expandedWorkspacesCache)
            );
            console.log(
              "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏–ª–∏ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –Ω–∞ –¥–æ—Å–∫—É:",
              workspaceId
            );
          }

          preserveExpandedWorkspaces();
        } catch (err) {
          console.error(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å–∫—Ä—ã—Ç—ã—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ (board click):",
            err
          );
        }

        if (typeof onBoardSelect === "function") {
          onBoardSelect(boardId, workspaceId);
        }
      });
    });

    const chatItems = document.querySelectorAll(".workspace-chat");
    chatItems.forEach((item) => {
      item.addEventListener("click", (e) => {
        e.stopPropagation();
        const chatId = item.getAttribute("data-chat-id");
        const workspaceId = item.getAttribute("data-workspace-id");

        try {
          if (
            workspaceId &&
            expandedWorkspacesCache &&
            !expandedWorkspacesCache.includes(workspaceId)
          ) {
            expandedWorkspacesCache.push(workspaceId);
            localStorage.setItem(
              "expanded_workspaces",
              JSON.stringify(expandedWorkspacesCache)
            );
          }
          preserveExpandedWorkspaces();
        } catch (err) {
          console.error(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å–∫—Ä—ã—Ç—ã—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ (chat click):",
            err
          );
        }

        if (typeof onChatSelect === "function") {
          onChatSelect(chatId, workspaceId);
        } else {
          navigateToChat(chatId, workspaceId);
        }
      });
    });

    const workspaceHeaders = document.querySelectorAll(".workspace-header");
    workspaceHeaders.forEach((header) => {
      header.addEventListener("click", (e) => {
        e.preventDefault();
        e.stopPropagation();

        try {
          const workspaceItem = header.closest(".workspace-list-item");
          const workspaceId = workspaceItem.getAttribute("data-workspace-id");

          const wasExpanded = workspaceItem.classList.contains("expanded");
          workspaceItem.classList.toggle("expanded");

          const icon = header.querySelector(".workspace-toggle");
          if (icon) {
            icon.classList.add("workspace-toggle-fixed");

            const itemsContainer = workspaceItem.querySelector(
              ".workspace-items-container"
            );
            if (itemsContainer) {
              if (wasExpanded) {
                itemsContainer.style.display = "none";
                itemsContainer.style.maxHeight = "0";
                itemsContainer.style.opacity = "0";
              } else {
                itemsContainer.style.display = "block";
                itemsContainer.style.maxHeight = "none";
                itemsContainer.style.opacity = "1";
              }
            }
          }

          preserveExpandedWorkspaces();
        } catch (err) {
          console.error(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª–∏–∫–∞ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:",
            err
          );
        }
      });
    });

    const workspaceTabs = document.querySelectorAll(".workspace-tab-item");
    workspaceTabs.forEach((tab) => {
      tab.addEventListener("click", () => {
        try {
          const expandedItems = document.querySelectorAll(
            ".workspace-list-item.expanded"
          );
          const expandedIds = Array.from(expandedItems)
            .map((item) => item.getAttribute("data-workspace-id"))
            .filter((id) => id);

          expandedWorkspacesCache = expandedIds.map((id) => id.toString());

          localStorage.setItem(
            "expanded_workspaces",
            JSON.stringify(expandedWorkspacesCache)
          );
          console.log(
            "–ü–µ—Ä–µ–¥ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –≤–∫–ª–∞–¥–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ä–∞—Å–∫—Ä—ã—Ç—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:",
            expandedWorkspacesCache
          );

          const tabType = tab.getAttribute("data-tab");

          workspaceTabs.forEach((t) => t.classList.remove("active"));
          tab.classList.add("active");

          activeWorkspaceTab = tabType;

          if (typeof onWorkspaceTabClick === "function") {
            onWorkspaceTabClick(tabType);

            setTimeout(() => {
              stabilizeDOMAfterRender();
            }, 50);
          }
        } catch (err) {
          console.error(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª–∏–∫–∞ –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:",
            err
          );
        }
      });
    });

    document.addEventListener("beforeunload", () => {
      preserveExpandedWorkspaces();
    });
  } catch (error) {
    console.error(
      "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏:",
      error
    );
  }
}

async function createNewBoard(onBoardSelect) {
  const boardName = prompt("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –¥–æ—Å–∫–∏:");
  console.log("–í–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è –¥–æ—Å–∫–∏:", boardName);

  if (!boardName || boardName.trim() === "") {
    console.log("–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ: –ø—É—Å—Ç–æ–µ –∏–º—è");
    return;
  }

  try {
    console.log("–ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏:", boardName);

    const currentHash = window.location.hash.substring(1);
    const urlParams = new URLSearchParams(
      currentHash.includes("?") ? currentHash.split("?")[1] : ""
    );
    const workspaceId = urlParams.get("workspace");

    const boardData = {
      name: boardName,
      boardData: JSON.stringify({
        columns: [
          { id: "column1", name: "–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é", tasks: [] },
          { id: "column2", name: "–í –ø—Ä–æ—Ü–µ—Å—Å–µ", tasks: [] },
          { id: "column3", name: "–ì–æ—Ç–æ–≤–æ", tasks: [] },
        ],
      }),
    };

    if (workspaceId) {
      boardData.workspaceId = workspaceId;
    }

    const boardList = document.getElementById("boardList");
    if (boardList) {
      const loadingHtml = '<div class="board-loading">–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏...</div>';
      boardList.innerHTML += loadingHtml;
    }

    console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏:", boardData);

    const newBoard = await kanbanService.createBoard(boardData);
    console.log("–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –¥–æ—Å–∫–∞:", newBoard);

    if (boardsCache) {
      boardsCache.push(newBoard);
      lastBoardsFetchTime = Date.now();
    }

    const cachedBoards = JSON.parse(
      localStorage.getItem("kanban_boards_cache") || "[]"
    );
    cachedBoards.push(newBoard);
    localStorage.setItem("kanban_boards_cache", JSON.stringify(cachedBoards));
    console.log(
      "–ö—ç—à –¥–æ—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω, —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å–æ–∫:",
      cachedBoards.length
    );

    if (typeof onBoardSelect === "function") {
      console.log("–í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–ª–±—ç–∫ —Å ID –Ω–æ–≤–æ–π –¥–æ—Å–∫–∏:", newBoard.id);

      onBoardSelect(newBoard.id);
    } else {
      console.log(
        "–ö–æ–ª–ª–±—ç–∫ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é –Ω–∞:",
        `/dashboard?board=${newBoard.id}`
      );

      if (workspaceId) {
        window.location.hash = `/dashboard?board=${newBoard.id}&workspace=${workspaceId}`;
      } else {
        window.location.hash = `/dashboard?board=${newBoard.id}`;
      }
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ—Å–∫–∏:", error);

    const loadingElement = document.querySelector(".board-loading");
    if (loadingElement) {
      loadingElement.remove();
    }

    alert(
      "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–æ—Å–∫—É: " + (error.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
    );
  }
}

function stabilizeDOMAfterRender() {
  setTimeout(() => {
    const expandedItems = document.querySelectorAll(
      ".workspace-list-item.expanded"
    );

    expandedItems.forEach((item) => {
      const itemsContainer = item.querySelector(".workspace-items-container");
      if (itemsContainer) {
        itemsContainer.style.display = "block";
        itemsContainer.style.maxHeight = "none";
        itemsContainer.style.opacity = "1";
        itemsContainer.style.transition = "none";
      }

      const toggleIcon = item.querySelector(".workspace-toggle");
      if (toggleIcon) {
        toggleIcon.textContent = "‚ùØ";

        toggleIcon.classList.add("workspace-toggle-fixed");
      }
    });

    const collapsedItems = document.querySelectorAll(
      ".workspace-list-item:not(.expanded)"
    );
    collapsedItems.forEach((item) => {
      const itemsContainer = item.querySelector(".workspace-items-container");
      if (itemsContainer) {
        itemsContainer.style.display = "none";
        itemsContainer.style.maxHeight = "0";
        itemsContainer.style.opacity = "0";
      }

      const toggleIcon = item.querySelector(".workspace-toggle");
      if (toggleIcon) {
        toggleIcon.textContent = "‚ùØ";

        toggleIcon.classList.add("workspace-toggle-fixed");
      }
    });

    console.log("DOM —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞");
  }, 0);
}
