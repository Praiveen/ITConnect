import { kanbanService } from '../services/kanban-service.js';

// –ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ—Å–æ–∫
let boardsCache = null;
let lastBoardsFetchTime = 0;
const CACHE_TIMEOUT = 60 * 1000; // 1 –º–∏–Ω—É—Ç–∞ - –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –≤ –ø–∞–º—è—Ç–∏

// –¢–∏–ø—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤
export const WORKSPACE_TABS = {
  ALL: 'all',
  MY: 'my',
  SHARED: 'shared'
};

// –¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞
let activeWorkspaceTab = WORKSPACE_TABS.MY;

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—ç—à—É –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
export function getBoardsCache() {
  return boardsCache;
}

export function updateBoardsCache(newCache) {
  boardsCache = newCache;
  lastBoardsFetchTime = Date.now();
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–∞—à–±–æ—Ä–¥–∞
export async function renderDashboardSidebar(activeBoard = null) {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª
  const now = Date.now();
  const useCache = boardsCache && (now - lastBoardsFetchTime < CACHE_TIMEOUT);
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å–æ–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –∏–∑ –∫—ç—à–∞
  let boards = [];
  if (useCache) {
    console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Å–∫–∞—Ö –∏–∑ –ø–∞–º—è—Ç–∏');
    boards = boardsCache;
  } else {
    try {
      console.log('–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Å–æ–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞...');
      boards = await kanbanService.getBoards();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏ –∏ localStorage
      boardsCache = boards;
      lastBoardsFetchTime = now;
      localStorage.setItem('kanban_boards_cache', JSON.stringify(boards));
      console.log(`–ü–æ–ª—É—á–µ–Ω—ã –¥–æ—Å–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞ (${boards.length}), –∫—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ—Å–æ–∫:', error);
      // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
      const localStorageCache = localStorage.getItem('kanban_boards_cache');
      if (localStorageCache) {
        boards = JSON.parse(localStorageCache);
        console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage (${boards.length} –¥–æ—Å–æ–∫)`);
      } else {
        console.log('–ö—ç—à –≤ localStorage –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫');
      }
    }
  }
  
  // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –¥–æ—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å–æ–∫, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
  if (activeBoard && !boards.some(board => board.id == activeBoard)) {
    try {
      console.log(`–ê–∫—Ç–∏–≤–Ω–∞—è –¥–æ—Å–∫–∞ ${activeBoard} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...`);
      const boardData = await kanbanService.getBoard(activeBoard);
      if (boardData) {
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å–∫—É –≤ —Å–ø–∏—Å–æ–∫ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à–∏
        boards.push(boardData);
        boardsCache = boards;
        localStorage.setItem('kanban_boards_cache', JSON.stringify(boards));
        console.log(`–î–æ—Å–∫–∞ ${activeBoard} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –∏ –∫—ç—à`);
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ç–∏–≤–Ω–æ–π –¥–æ—Å–∫–∏ ${activeBoard}:`, error);
    }
  }
  
  return `
    <div class="dashboard-sidebar">
      <div class="sidebar-header">
        <div class="sidebar-title">–†–∞–±–æ—á–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞</div>
      </div>
      
      <div class="workspace-tabs-vertical">
        <div class="workspace-tab-item ${activeWorkspaceTab === WORKSPACE_TABS.ALL ? 'active' : ''}" data-tab="${WORKSPACE_TABS.ALL}">
          <span class="workspace-tab-icon">üåê</span>
          <span>–í—Å–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞</span>
        </div>
        <div class="workspace-tab-item ${activeWorkspaceTab === WORKSPACE_TABS.MY ? 'active' : ''}" data-tab="${WORKSPACE_TABS.MY}">
          <span class="workspace-tab-icon">üë§</span>
          <span>–ú–æ–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞</span>
        </div>
        <div class="workspace-tab-item ${activeWorkspaceTab === WORKSPACE_TABS.SHARED ? 'active' : ''}" data-tab="${WORKSPACE_TABS.SHARED}">
          <span class="workspace-tab-icon">üë•</span>
          <span>–°–æ–≤–º–µ—Å—Ç–Ω—ã–µ</span>
        </div>
      </div>
      
      <div class="sidebar-menu">
        <button class="create-board-button" id="createBoardButton">
          <span>+</span> –°–æ–∑–¥–∞—Ç—å –¥–æ—Å–∫—É
        </button>
        
        <div class="sidebar-section">
          <div class="sidebar-section-title">
            –ú–æ–∏ –¥–æ—Å–∫–∏
          </div>
          
          <div class="board-list" id="boardList">
            ${boards.length > 0 
              ? boards.map(board => `
                <div class="sidebar-item ${board.id == activeBoard ? 'active' : ''}" data-board-id="${board.id}">
                  <span class="sidebar-item-icon">üìã</span>
                  <span>${board.name}</span>
                </div>
              `).join('')
              : `<div class="board-empty-state">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å–æ–∫</div>`
            }
          </div>
        </div>
      </div>
    </div>
  `;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
export function setupSidebarEventListeners(onBoardSelect, onWorkspaceTabClick) {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏
  const createBoardButton = document.getElementById('createBoardButton');
  if (createBoardButton) {
    createBoardButton.addEventListener('click', () => {
      createNewBoard(onBoardSelect);
    });
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ –¥–æ—Å–æ–∫
  const boardItems = document.querySelectorAll('.sidebar-item[data-board-id]');
  boardItems.forEach(item => {
    item.addEventListener('click', () => {
      const boardId = item.getAttribute('data-board-id');
      if (typeof onBoardSelect === 'function') {
        onBoardSelect(boardId);
      }
    });
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤
  const workspaceTabs = document.querySelectorAll('.workspace-tab-item');
  workspaceTabs.forEach(tab => {
    tab.addEventListener('click', () => {
      const tabType = tab.getAttribute('data-tab');
      
      // –ú–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
      workspaceTabs.forEach(t => t.classList.remove('active'));
      tab.classList.add('active');
      
      activeWorkspaceTab = tabType;
      
      // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∫–ª–∞–¥–∫–∏
      if (typeof onWorkspaceTabClick === 'function') {
        onWorkspaceTabClick(tabType);
      }
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –¥–æ—Å–∫–∏
async function createNewBoard(onBoardSelect) {
  const boardName = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –¥–æ—Å–∫–∏:');
  console.log('–í–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è –¥–æ—Å–∫–∏:', boardName);
  
  if (!boardName || boardName.trim() === '') {
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ: –ø—É—Å—Ç–æ–µ –∏–º—è');
    return;
  }
  
  try {
    console.log('–ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏:', boardName);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–∑ URL (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const currentHash = window.location.hash.substring(1);
    const urlParams = new URLSearchParams(currentHash.includes('?') ? currentHash.split('?')[1] : '');
    const workspaceId = urlParams.get('workspace');
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤–æ–π –¥–æ—Å–∫–µ
    const boardData = {
      name: boardName,
      boardData: JSON.stringify({
        columns: [
          { id: 'column1', name: '–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é', tasks: [] },
          { id: 'column2', name: '–í –ø—Ä–æ—Ü–µ—Å—Å–µ', tasks: [] },
          { id: 'column3', name: '–ì–æ—Ç–æ–≤–æ', tasks: [] }
        ]
      })
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞, –µ—Å–ª–∏ –æ–Ω–æ –≤—ã–±—Ä–∞–Ω–æ
    if (workspaceId) {
      boardData.workspaceId = workspaceId;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Å–∞–π–¥–±–∞—Ä–µ
    const boardList = document.getElementById('boardList');
    if (boardList) {
      const loadingHtml = '<div class="board-loading">–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏...</div>';
      boardList.innerHTML += loadingHtml;
    }
    
    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏:', boardData);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏
    const newBoard = await kanbanService.createBoard(boardData);
    console.log('–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –¥–æ—Å–∫–∞:', newBoard);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∫—ç—à–∏
    // 1. –ö—ç—à –≤ –ø–∞–º—è—Ç–∏
    if (boardsCache) {
      boardsCache.push(newBoard);
      lastBoardsFetchTime = Date.now();
    }
    
    // 2. –ö—ç—à –≤ localStorage
    const cachedBoards = JSON.parse(localStorage.getItem('kanban_boards_cache') || '[]');
    cachedBoards.push(newBoard);
    localStorage.setItem('kanban_boards_cache', JSON.stringify(cachedBoards));
    console.log('–ö—ç—à –¥–æ—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω, —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å–æ–∫:', cachedBoards.length);
    
    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–æ–∑–¥–∞–Ω–Ω—É—é –¥–æ—Å–∫—É
    if (typeof onBoardSelect === 'function') {
      console.log('–í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–ª–±—ç–∫ —Å ID –Ω–æ–≤–æ–π –¥–æ—Å–∫–∏:', newBoard.id);
      // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–ª–±—ç–∫ —Å ID –Ω–æ–≤–æ–π –¥–æ—Å–∫–∏
      onBoardSelect(newBoard.id);
    } else {
      console.log('–ö–æ–ª–ª–±—ç–∫ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é –Ω–∞:', `/dashboard?board=${newBoard.id}`);
      // –ï—Å–ª–∏ –∫–æ–ª–ª–±—ç–∫ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –¥–æ—Å–∫–µ
      if (workspaceId) {
        window.location.hash = `/dashboard?board=${newBoard.id}&workspace=${workspaceId}`;
      } else {
        window.location.hash = `/dashboard?board=${newBoard.id}`;
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ—Å–∫–∏:', error);
    
    // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    const loadingElement = document.querySelector('.board-loading');
    if (loadingElement) {
      loadingElement.remove();
    }
    
    alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–æ—Å–∫—É: ' + (error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
  }
} 