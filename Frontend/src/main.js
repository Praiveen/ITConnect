import "./css/main.css";
import javascriptLogo from "./javascript.svg";
import viteLogo from "/vite.svg";
import logo_ITConnect from "/logo_ITConnect.png";
import { authService } from "./services/auth-service.js";
import { initRouter, registerRoute, navigateTo } from "./router.js";
import {
  renderHeader,
  setupHeaderEventListeners,
} from "./components/Header.js";
import { renderFooter } from "./components/Footer.js";

function renderHomePage() {
  document.querySelector("#app").innerHTML = `
    <div class="app-container">
      <!-- Header -->
      ${renderHeader()}

      <!-- Hero Section -->
      <section class="hero">
        <h1 class="hero-title">–£–ø—Ä–æ—â–∞–π—Ç–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é –≤ IT-–∫–æ–º–∞–Ω–¥–µ</h1>
        <p class="hero-subtitle">ITConnect ‚Äî –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±–º–µ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤–Ω—É—Ç—Ä–∏ IT-–∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç —É—Å–∫–æ—Ä–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –∏ —É–ª—É—á—à–∏—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ</p>
        ${
          !authService.isAuthenticated()
            ? `<button class="btn-register">–ù–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ</button>`
            : `<button class="btn-dashboard">–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞–±–æ—Ç–µ</button>`
        }
      </section>

      <!-- Features Section -->
      <section class="features">
        <div class="feature-card">
          <div class="feature-icon">üí¨</div>
          <h3>–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</h3>
          <p>–û–±—â–∞–π—Ç–µ—Å—å —Å –∫–æ–º–∞–Ω–¥–æ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫ –∏ –ø–æ–º–µ—Ö</p>
        </div>
        <div class="feature-card">
          <div class="feature-icon">üìã</div>
          <h3>Kanban –¥–æ—Å–∫–∏</h3>
          <p>–£–ø—Ä–æ—â–∞–π—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –∏ –¥–æ—Å—Ç–∏–≥–∞–π—Ç–µ —Ü–µ–ª–µ–π –≤–º–µ—Å—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É—è –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</p>
        </div>
        <div class="feature-card">
          <div class="feature-icon">üë•</div>
          <h3>–ì—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã</h3>
          <p>–°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∫–æ–º–∞–Ω–¥</p>
        </div>
        <div class="feature-card">
          <div class="feature-icon">üîê</div>
          <h3>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</h3>
          <p>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–¥–µ–∂–Ω–æ –∑–∞—â–∏—â–µ–Ω—ã —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è</p>
        </div>
      </section>

      <!-- Footer -->
      ${renderFooter()}
    </div>
  `;

  setupHeaderEventListeners();

  setupHomePageButtons();
}

function setupHomePageButtons() {
  document.querySelectorAll(".btn-register").forEach((button) => {
    button.addEventListener("click", () => {
      console.log("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
      import("./pages/register.js").then((module) => {
        module.renderRegisterPage();
      });
    });
  });

  document.querySelectorAll(".btn-dashboard").forEach((button) => {
    button.addEventListener("click", () => {
      console.log("–ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–∞—à–±–æ—Ä–¥—É");
      navigateTo("/dashboard");
    });
  });
}

function initializeRoutes() {
  registerRoute("/", renderHomePage);

  registerRoute("/login", () => {
    import("./pages/auth.js").then((module) => {
      module.renderLoginPage();
    });
  });

  registerRoute("/register", () => {
    import("./pages/register.js").then((module) => {
      module.renderRegisterPage();
    });
  });

  registerRoute("/profile", () => {
    import("./pages/profile.js").then((module) => {
      module.renderProfilePage();
    });
  });

  registerRoute("/dashboard", () => {
    import("./pages/dashboard.js").then((module) => {
      module.renderDashboardPage();
    });
  });
}

async function checkAuthState() {
  try {
    try {
      await authService.getUserProfile();
      console.log("–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");

      const redirectAfterAuth = sessionStorage.getItem("redirectAfterAuth");
      if (redirectAfterAuth) {
        sessionStorage.removeItem("redirectAfterAuth");
        navigateTo(redirectAfterAuth);
        return true;
      }
    } catch (error) {
      console.log("–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
    }

    return false;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", error);
    return false;
  }
}

async function initApp() {
  initializeRoutes();

  initRouter();

  const hash = window.location.hash;
  if (hash && hash.length > 1) {
    console.log("–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ö—ç—à –≤ URL:", hash);

    return;
  }

  const shouldRedirect = await checkAuthState();
  if (!shouldRedirect) {
    renderHomePage();
  }
}

initApp();

function getCookies() {
  const cookies = document.cookie;

  if (cookies) {
    const cookieArray = cookies.split("; ");

    cookieArray.forEach((cookie) => {
      console.log(cookie);
    });
  } else {
    console.log("–ö—É–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
  }
}

getCookies();
